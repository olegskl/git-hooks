#!/bin/sh

# Get the full directory path of the repository(!) folder:
# (it does not matter where the script is called from)
REPO_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../" && pwd )"

# Get the basename of the repository directory path:
REPO_NAME=${REPO_PATH##*/}

# Inform about the purpose of the script:
echo "Running \033[34m$REPO_NAME\033[0m post-commit hook:"

# ================================= ARCHIVE ================================== #

# Branch to archive:
BRANCH_NAME="master"

# printf to avoid newline:
printf "1. Archiving the \033[4m$BRANCH_NAME\033[0m branch... "

# The output file goes to the PARENT directory of the repo:
OUTPUT="$REPO_PATH/../$REPO_NAME.zip" 
# Create a clean archive in the parent folder of the repository and capture stderr:
RESULT=$(git archive --format zip --output "$OUTPUT" "$BRANCH_NAME" 2>&1 > /dev/null)

# Checking for the most recent exit code (the one of git archive):
if [[ $? -eq 0 ]]; then
    printf "\033[1;32mdone\033[0m.\n"
else
    printf "\033[1;31mfailed\033[0m.\n"
    echo $RESULT
    # no need to exit here, error not critical
fi

# ================================= BACK UP ================================== #

# printf to avoid newline:
printf "2. Mirroring the repository... "

# Obtain the list of auto backup remotes and capture stderr:
REMOTES=$(git remote | grep ^backup-auxto-)

# Output a warning in case no auto backup remotes are specified:
if [[ ! -n "$REMOTES" ]]; then
    printf "\033[33mno backup-auto-* remotes defined\033[0m.\n"
else
    printf "\n"

    # Mirror push to every auto backup remote:
    for REMOTE in "$REMOTES"; do
        printf "   $REMOTE... "

        # Execute the push command and capture stderr: 
        RESULT=$(git push $REMOTE --mirror 2>&1 > /dev/null)

        # Checking for the most recent exit code (the one of git push):
        if [[ $? -eq 0 ]]; then
            printf "\033[1;32mdone\033[0m.\n"
        else
            printf "\033[1;31mfailed\033[0m.\n"
            echo $RESULT
            # no need to exit here, error not critical
        fi
    done
fi

# ================================= THE END ================================== #

# Finishing touches:
echo "All done."
